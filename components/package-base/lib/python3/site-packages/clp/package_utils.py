import json
import pathlib
import subprocess

from clp_py_utils.clp_config import CLPConfig


def check_env(cluster_name: str):
    check_docker_network_bridge_cmd = ['docker', 'network', 'inspect', cluster_name]
    proc = subprocess.run(check_docker_network_bridge_cmd, stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)
    if 0 != proc.returncode:
        raise EnvironmentError(f'Failed to inspect docker network bridge {cluster_name}')

    bridge_bridge_specification = json.loads(proc.stdout.decode('utf-8'))[0]
    required_containers = set([cluster_name])
    for container_id, container in bridge_bridge_specification['Containers'].items():
        try:
            required_containers.remove(container['Name'])
        except KeyError:
            pass

    if required_containers:
        raise EnvironmentError(f'The required container is not started: {",".join(required_containers)}')


def prepare_package_and_config(clp_config: CLPConfig, clp_home: pathlib.Path, docker_clp_home: pathlib.Path):
    host_data_directory = pathlib.Path(clp_config.data_directory)
    if '' == host_data_directory.anchor:
        # In the config file, we assume prefix is clp_home inside the docker (/root/clp)
        host_data_directory = clp_home / clp_config.data_directory
        clp_config.data_directory = str(docker_clp_home / clp_config.data_directory)
    host_data_directory.mkdir(parents=True, exist_ok=True)

    host_log_directory = pathlib.Path(clp_config.logs_directory)
    if '' == host_log_directory.anchor:
        # In the config file, we assume prefix is clp_home, inside the docker (/root/clp)
        host_log_directory = clp_home / clp_config.logs_directory
        clp_config.logs_directory = str(docker_clp_home / clp_config.logs_directory)
    host_log_directory.mkdir(parents=True, exist_ok=True)

    host_archive_output_directory = pathlib.Path(clp_config.archive_output.directory)
    if '' == host_archive_output_directory.anchor:
        # In the config file, we assume prefix is clp_home, inside the docker (/root/clp)
        host_archive_output_directory = clp_home / clp_config.archive_output.directory
        clp_config.archive_output.directory = \
            str(docker_clp_home / clp_config.archive_output.directory)
    host_archive_output_directory.mkdir(parents=True, exist_ok=True)

    return host_data_directory, host_log_directory, host_archive_output_directory, clp_config


def make_config_path_absolute(clp_home: pathlib.Path, config_path: pathlib.Path):
    if config_path.is_absolute():
        return config_path
    else:
        return clp_home / config_path
